<?php

namespace PhpParser;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the skeleton file grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 */
class Parser extends ParserAbstract
{
    protected $tokenToSymbolMapSize = 391;
    protected $actionTableSize = 1118;
    protected $gotoTableSize = 573;

    protected $invalidToken = 156;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 406;
    protected $YYNLSTATES   = 638;

    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_PLUS_EQUAL = 267;
    const T_MINUS_EQUAL = 268;
    const T_MUL_EQUAL = 269;
    const T_DIV_EQUAL = 270;
    const T_CONCAT_EQUAL = 271;
    const T_MOD_EQUAL = 272;
    const T_AND_EQUAL = 273;
    const T_OR_EQUAL = 274;
    const T_XOR_EQUAL = 275;
    const T_SL_EQUAL = 276;
    const T_SR_EQUAL = 277;
    const T_POW_EQUAL = 278;
    const T_COALESCE = 279;
    const T_BOOLEAN_OR = 280;
    const T_BOOLEAN_AND = 281;
    const T_IS_EQUAL = 282;
    const T_IS_NOT_EQUAL = 283;
    const T_IS_IDENTICAL = 284;
    const T_IS_NOT_IDENTICAL = 285;
    const T_SPACESHIP = 286;
    const T_IS_SMALLER_OR_EQUAL = 287;
    const T_IS_GREATER_OR_EQUAL = 288;
    const T_SL = 289;
    const T_SR = 290;
    const T_INSTANCEOF = 291;
    const T_INC = 292;
    const T_DEC = 293;
    const T_INT_CAST = 294;
    const T_DOUBLE_CAST = 295;
    const T_STRING_CAST = 296;
    const T_ARRAY_CAST = 297;
    const T_OBJECT_CAST = 298;
    const T_BOOL_CAST = 299;
    const T_UNSET_CAST = 300;
    const T_POW = 301;
    const T_NEW = 302;
    const T_CLONE = 303;
    const T_EXIT = 304;
    const T_IF = 305;
    const T_ELSEIF = 306;
    const T_ELSE = 307;
    const T_ENDIF = 308;
    const T_LNUMBER = 309;
    const T_DNUMBER = 310;
    const T_STRING = 311;
    const T_STRING_VARNAME = 312;
    const T_VARIABLE = 313;
    const T_NUM_STRING = 314;
    const T_INLINE_HTML = 315;
    const T_CHARACTER = 316;
    const T_BAD_CHARACTER = 317;
    const T_ENCAPSED_AND_WHITESPACE = 318;
    const T_CONSTANT_ENCAPSED_STRING = 319;
    const T_ECHO = 320;
    const T_DO = 321;
    const T_WHILE = 322;
    const T_ENDWHILE = 323;
    const T_FOR = 324;
    const T_ENDFOR = 325;
    const T_FOREACH = 326;
    const T_ENDFOREACH = 327;
    const T_DECLARE = 328;
    const T_ENDDECLARE = 329;
    const T_AS = 330;
    const T_SWITCH = 331;
    const T_ENDSWITCH = 332;
    const T_CASE = 333;
    const T_DEFAULT = 334;
    const T_BREAK = 335;
    const T_CONTINUE = 336;
    const T_GOTO = 337;
    const T_FUNCTION = 338;
    const T_CONST = 339;
    const T_RETURN = 340;
    const T_TRY = 341;
    const T_CATCH = 342;
    const T_FINALLY = 343;
    const T_THROW = 344;
    const T_USE = 345;
    const T_INSTEADOF = 346;
    const T_GLOBAL = 347;
    const T_STATIC = 348;
    const T_ABSTRACT = 349;
    const T_FINAL = 350;
    const T_PRIVATE = 351;
    const T_PROTECTED = 352;
    const T_PUBLIC = 353;
    const T_VAR = 354;
    const T_UNSET = 355;
    const T_ISSET = 356;
    const T_EMPTY = 357;
    const T_HALT_COMPILER = 358;
    const T_CLASS = 359;
    const T_TRAIT = 360;
    const T_INTERFACE = 361;
    const T_EXTENDS = 362;
    const T_IMPLEMENTS = 363;
    const T_OBJECT_OPERATOR = 364;
    const T_DOUBLE_ARROW = 365;
    const T_LIST = 366;
    const T_ARRAY = 367;
    const T_CALLABLE = 368;
    const T_CLASS_C = 369;
    const T_TRAIT_C = 370;
    const T_METHOD_C = 371;
    const T_FUNC_C = 372;
    const T_LINE = 373;
    const T_FILE = 374;
    const T_COMMENT = 375;
    const T_DOC_COMMENT = 376;
    const T_OPEN_TAG = 377;
    const T_OPEN_TAG_WITH_ECHO = 378;
    const T_CLOSE_TAG = 379;
    const T_WHITESPACE = 380;
    const T_START_HEREDOC = 381;
    const T_END_HEREDOC = 382;
    const T_DOLLAR_OPEN_CURLY_BRACES = 383;
    const T_CURLY_OPEN = 384;
    const T_PAAMAYIM_NEKUDOTAYIM = 385;
    const T_NAMESPACE = 386;
    const T_NS_C = 387;
    const T_DIR = 388;
    const T_NS_SEPARATOR = 389;
    const T_ELLIPSIS = 390;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,   51,  155,  156,  152,   50,   33,  156,
          150,  151,   48,   45,    7,   46,   47,   49,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,   27,  147,
           39,   13,   41,   26,   63,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,   65,  156,  154,   32,  156,  153,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  148,   31,  149,   53,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   14,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   28,
           29,   30,   34,   35,   36,   37,   38,   40,   42,   43,
           44,   52,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   64,   66,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,  156,  156,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  156,  156,  156,  156,  156,
          156,  137,  138,  139,  140,  141,  142,  143,  144,  145,
          146
    );

    protected $action = array(
           60,   61,  416,   62,   63,-32766,-32766,-32766,-32766,   64,
           65,  221,  222,  223,  224,  225,  226,  227,  228,  229,
          642,  230,  231,  232,  233,  234,  235,  236,  237,  238,
          239,  240,  241,-32766,-32766,-32766,-32766,-32766,-32767,-32767,
        -32767,-32767,  285,   66,   67,  283,  242,  243,    0,   68,
          436,   69,  294,  295,   70,   71,   72,   73,   74,   75,
           76,   77,  128,   32,  304,   78,  408,  417,  134, -118,
          413,  956,  957,  457,  438, 1049,  334,  688,  344,  458,
           46,   27,  418,  610,  459,  809,  460,  485,  461,  363,
          421,  419,  218,  219,  220,   36,   37,  462,  424,   57,
           38,  463,  420,  409,   79,  441,  301,  356,  357,  323,
          205,  246,   35,  464,  465,  466,  467,  468,  713,  454,
         1015,  375,  648,  714,  469,  470,  471,  472,  908,  962,
          963,  964,  965,  959,  960,  312,   83,   84,   85,  532,
          485,  966,  961,  421,  336,  694,  611,  132,   47,  298,
          337,  324, 1078,  328,   40,  801,   86,   87,   88,   89,
           90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
          100,  101,  102,  103,  104,  105,  106,  107,  108,-32766,
          305,  298,  125,   39,  297,-32766, 1056,-32766,-32766,-32766,
          686,  642,  109,  433,   58,-32766,-32766,-32766,-32766,-32766,
        -32766,  471,-32766,  415,-32766,-32766,-32766,-32766,-32766,-32766,
          218,  219,  220,-32766,-32766,-32766,   31,-32766,-32766,-32766,
          219,  220,-32766,  642,  209,-32766,  484,-32766,  205,  685,
        -32766,-32766,-32766,-32766,-32766,  908,-32766,  205,-32766,  766,
          767,-32766,  218,  219,  220,-32766,-32766,-32766,  742,   22,
        -32766,-32766,  353,  354,-32766,  326,  296,-32766,  484,  791,
          205, -122,  131,-32766,-32766,-32766,  310,  908,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32766,  127,-32767,-32767,
        -32767,-32767,  817,  818,  819,  816,  815,  814,  286,-32766,
        -32766,-32766,-32766,   54,  131,-32766,-32766,  412,  642,  772,
         1071, 1081,-32766, 1083, 1082,-32766,-32766,-32766,  339,-32766,
          908,-32766,  782,-32766,  434, 1043,-32766,  218,  219,  220,
        -32766,-32766,-32766, 1014,-32766,-32766,-32766,  242,  243,-32766,
          642,  601,-32766,  484,-32766,  205, 1053,-32766,-32766,-32766,
        -32766,-32766,   55,-32766,  642,-32766, 1049,  923,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,  440, 1006,-32766,-32766,  430,
          773,-32766,  613,  908,-32766,  484,  568,-32766,  743, 1015,
        -32766,-32766,-32766,  642,  385, 1012,  123,-32766,  130,  933,
        -32766,-32766,-32766,  413,-32766, 1007,-32766,  287,-32766,  334,
          345,-32766,  218,  219,  220,-32766,-32766,-32766,  809,  300,
        -32766,-32766,-32766,-32766,-32766,  796,  908,-32766,  484,  133,
          205,  485,  136,  220,  421,-32766,  560,  413,  435,  425,
        -32766,  337,  355,  334,  968,  124,  642,  299,  132,  205,
        -32766,  711,  809,-32766,-32766,-32766,  244,-32766,  908,-32766,
         1049,-32766,-32766,-32766,-32766,-32766,-32766,  122,-32766,-32766,
        -32766,  448,  574,-32766,-32766,  443,   28,-32766,  247, 1071,
        -32766,  484,  212,-32766,  211,  712,  137,  364,-32766,  642,
          106,  107,  108,-32766,  305,  329,-32766,-32766,-32766,  210,
        -32766,  908,-32766,  248,-32766,  205,  109,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766,  634,-32766,-32766,-32766,-32766,-32766,
        -32766,  642,-32766,-32766,  484,-32766,-32766,  707,-32766,-32766,
        -32766,-32766,-32766,  908,-32766,  337,-32766, 1013,  627,-32766,
          236,  237,  238,-32766,-32766,-32766,  766,  767,-32766,-32766,
          806,  637,-32766,  968,  135,-32766,  484,  616,-32766,  581,
          582,-32766,-32766,-32766,  642,  103,  104,  105,-32766,  795,
          630,-32766,-32766,-32766,  698,-32766,  908,-32766,  631,-32766,
          626,  311,-32766,  649,  618,  623,-32766,-32766,-32766,  614,
        -32766,-32766,-32766,  680,-32766,-32766,  642,  305,-32766,  484,
        -32766,  109,  304,-32766,-32766,-32766,-32766,-32766,   51,-32766,
          586,-32766, -170,   59,-32766,   56,  609,   53,-32766,-32766,
        -32766,   52,   50,-32766,-32766,   49,  509,-32766,  432,  428,
        -32766,  484,  583,-32766,  431,  578,  678,-32766,-32766,  642,
          598,  523,  522,-32766,  429,  642,-32766,-32766,-32766,  803,
        -32766,  643,-32766,  245,-32766,  510,  659,-32766,  506, 1076,
          661,-32766,-32766,-32766,  505,  593,-32766,-32766,  682,-32766,
        -32766,  213,  214,-32766,  484,  926,  600,  215,  553,  216,
          342,-32766,-32767,-32767,-32767,-32767,  101,  102,  103,  104,
          105,  207,  239,  240,  241,  343, 1071,  282,  303,  956,
          957,  525, -167,-32766,-32766,  577,  565,  958,  242,  243,
          642,-32766,-32766,  452,-32766,  335,  716,-32766,-32766,-32766,
          338,-32766,  715,-32766,  126,-32766,  332,  515,-32766,  333,
           42,  967,-32766,-32766,-32766,  315,  471,-32766,-32766,  792,
         -397,-32766,  888, -398,-32766,  484,-32766,-32766,-32766,-32766,
        -32766,  325,-32766,  327,    0,  550,    0,  962,  963,  964,
          965,  959,  960,  391, -304,  213,  214,  430,  800,  966,
          961,  215, -296,  216,  606,  378,  217,  365,-32766,  331,
         -305,  735,-32766,-32766,  652,  207,  949,  412,  687,  734,
        -32766,  709,    0,  956,  957,  726,  642,-32766,  728,  730,
        -32766,  958,  673,-32766,-32766,-32766,  737,-32766,  736,-32766,
          745,-32766,  690,  675,-32766,  697,  684,  620,-32766,-32766,
        -32766,  619,  420,-32766,-32766,   45,   44,-32766,  655,  654,
        -32766,  484,  653,  464,  465,  802,  696,  683,-32766,  681,
          679,  689,  670,  714,  469,  470,  799,  447,  129,  550,
           82,  962,  963,  964,  965,  959,  960,  391,  612,  617,
          622,  624,  629,  966,  961, 1077,  632,  633,-32766,-32766,
          217,  621,-32766,   41,  110,  111,  112,  113,  114,  115,
          116,  117,  118,  119,  120,  121,-32766,-32766,-32766,  635,
          420,  409,  636,  411, 1050, 1048, 1034,  323,-32766,-32766,
        -32766,  464,  465, 1046,-32766, 1044,-32766,-32766,-32766,-32766,
          648,  714,  469,  470,  847,  849,-32766, 1054,-32766,-32766,
        -32766,-32766,-32766,-32766,-32767,-32767,-32767,-32767,-32767,  420,
          409, 1079,  336, 1080,  420,  784,  323,  947,  554,  651,
          464,  465,-32766,-32766,-32766,  464,  465,  407,  340,  648,
          714,  469,  470,   33,  670,  714,  469,  470,   34,   43,
        -32766,   48,-32766,-32766,-32766,-32766,-32766,-32766,  309,  308,
           80,  336,-32766,-32766,-32766,-32766,  307,  420,  650,  887,
          306,  293,  292,  671,  911,  284, -397,  208,  464,  465,
        -32766,  420,-32766,-32766,-32766,-32766,-32766,  670,  714,  469,
          470,   81,  464,  465,   30,  906, -119,  420,  972,  774,
          915,  670,  714,  469,  470,  912,  605,  545,  464,  465,
          455,  420,  451,  449,  444,  420,  710,  670,  714,  469,
          470,  386,  464,  465,   25,   24,  464,  465,  420,   23,
          807,  670,  714,  469,  470,  670,  714,  469,  470,  464,
          465, -118,  584,  562,    0, 1028,  701,  973,  670,  714,
          469,  470, 1075,-32766,-32766,-32766,  946, 1045,  420,  608,
          910, 1029, 1033, 1047,  909,  599,  932,  919,  920,  464,
          465,-32766,  420,-32766,-32766,-32766,  420,  703,  670,  714,
          469,  470,  590,  464,  465,  917,  918,  464,  465,  916,
            0,  420,  670,  714,  469,  470,  670,  714,  469,  470,
            0,    0,  464,  465,  420,    0,    0,    0,    0,    0,
            0,  670,  714,  469,  470,  464,  465,    0,    0,    0,
            0,    0,    0,    0,  670,  714,  469,  470
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,   29,   30,   31,   32,   11,
           12,   29,   30,   31,   32,   33,   34,   35,   36,   37,
           75,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   29,   30,   31,   32,   33,   34,   35,
           36,   37,    7,   45,   46,  127,   64,   65,    0,   51,
            7,   53,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   63,    7,   65,   66,   67,   68,   69,   65,  151,
          101,   73,   74,   75,   75,   77,  107,   79,   65,   81,
           82,   83,   84,   75,   86,  116,   88,  142,   90,    7,
          145,   93,    8,    9,   10,   97,   98,   99,  100,   65,
          102,  103,  100,  101,  106,    7,   33,  109,  110,  107,
           26,   27,    7,  111,  112,  117,  118,  119,  149,    7,
          121,   77,  120,  121,  122,  123,  128,  129,   12,  131,
          132,  133,  134,  135,  136,  137,    8,    9,   10,  126,
          142,  143,  144,  145,  142,  147,  148,  148,  150,   33,
          152,  153,  149,  155,   26,  147,   28,   29,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,    8,
           52,   33,  148,  139,  140,   69,  151,    8,    9,   10,
          147,   75,   64,   27,   65,   79,    8,    9,   82,   83,
           84,  128,   86,    7,   88,   26,   90,   28,   29,   93,
            8,    9,   10,   97,   98,   99,    7,   69,  102,  103,
            9,   10,  106,   75,    7,  109,  110,   79,   26,  147,
           82,   83,   84,  117,   86,   12,   88,   26,   90,  129,
          130,   93,    8,    9,   10,   97,   98,   99,   27,  151,
          102,  103,  100,  101,  106,  126,   33,  109,  110,  147,
           26,  151,  146,  147,  148,  117,    7,   12,   29,   30,
           31,   32,   33,   34,   35,   36,   37,  148,   39,   40,
           41,   42,  110,  111,  112,  113,  114,  115,   33,    8,
            9,   10,   69,   65,  146,  147,  148,  145,   75,  151,
           80,   75,   79,   77,   78,   82,   83,   84,    7,   86,
           12,   88,   77,   90,  148,   77,   93,    8,    9,   10,
           97,   98,   99,   75,   69,  102,  103,   64,   65,  106,
           75,   75,  109,  110,   79,   26,   75,   82,   83,   84,
          117,   86,   65,   88,   75,   90,   77,  151,   93,   29,
           30,   31,   97,   98,   99,   75,  154,  102,  103,  145,
          151,  106,  148,   12,  109,  110,   80,   69,  147,  121,
          147,  148,  117,   75,   76,  155,  148,   79,   27,  110,
           82,   83,   84,  101,   86,  151,   88,  152,   90,  107,
          152,   93,    8,    9,   10,   97,   98,   99,  116,    7,
          102,  103,  147,  148,  106,  149,   12,  109,  110,  148,
           26,  142,  148,   10,  145,  117,  152,  101,    7,  150,
           69,  152,    7,  107,  138,  148,   75,   33,  148,   26,
           79,  149,  116,   82,   83,   84,  127,   86,   12,   88,
           77,   90,   29,   30,   93,  147,  148,   13,   97,   98,
           99,   70,   71,  102,  103,   70,   71,  106,   13,   80,
          109,  110,   13,   69,   13,  149,   95,   96,  117,   75,
           48,   49,   50,   79,   52,   80,   82,   83,   84,   13,
           86,   12,   88,   13,   90,   26,   64,   93,    8,    9,
           10,   97,   98,   99,   27,   69,  102,  103,  147,  148,
          106,   75,   29,  109,  110,   79,   26,   33,   82,   83,
           84,  117,   86,   12,   88,  152,   90,  138,   27,   93,
           45,   46,   47,   97,   98,   99,  129,  130,  102,  103,
          147,  148,  106,  138,   27,  109,  110,   27,   69,  104,
          105,  147,  148,  117,   75,   45,   46,   47,   79,  147,
          148,   82,   83,   84,   27,   86,   12,   88,   27,   90,
           27,   27,   93,  147,  148,   27,   97,   98,   99,   27,
           69,  102,  103,  147,  148,  106,   75,   52,  109,  110,
           79,   64,   66,   82,   83,   84,  117,   86,   65,   88,
           72,   90,   77,   65,   93,   65,   75,   65,   97,   98,
           99,   65,   65,  102,  103,   65,   77,  106,   84,  100,
          109,  110,   77,   69,   75,  107,  147,  148,  117,   75,
           75,   75,   75,   79,   75,   75,   82,   83,   84,   75,
           86,   75,   88,   27,   90,   75,   75,   93,   75,   75,
           75,   97,   98,   99,   75,   77,  102,  103,  147,  148,
          106,   45,   46,  109,  110,   77,   77,   51,   92,   53,
           80,  117,   39,   40,   41,   42,   43,   44,   45,   46,
           47,   65,   48,   49,   50,   80,   80,   92,   92,   73,
           74,   92,   92,   77,   69,   94,   94,   81,   64,   65,
           75,  147,  148,  100,   79,  108,  121,   82,   83,   84,
          124,   86,  121,   88,  127,   90,  124,  145,   93,  125,
          127,  138,   97,   98,   99,  141,  128,  102,  103,  147,
          126,  106,  151,  126,  109,  110,   29,   30,   31,   32,
           33,  126,  117,  126,   -1,  129,   -1,  131,  132,  133,
          134,  135,  136,  137,  141,   45,   46,  145,  147,  143,
          144,   51,  141,   53,  141,  141,  150,  141,  152,  141,
          141,  149,  147,  148,  147,   65,  151,  145,  147,  149,
           69,  146,   -1,   73,   74,  147,   75,   77,  147,  147,
           79,   81,  147,   82,   83,   84,  147,   86,  147,   88,
          147,   90,  147,  147,   93,  147,  147,  147,   97,   98,
           99,  147,  100,  102,  103,  147,  147,  106,  147,  147,
          109,  110,  147,  111,  112,  147,  147,  147,  117,  147,
          147,  147,  120,  121,  122,  123,  147,  149,  148,  129,
          148,  131,  132,  133,  134,  135,  136,  137,  148,  148,
          148,  148,  148,  143,  144,  149,  148,  148,  147,  148,
          150,  149,  152,   13,   14,   15,   16,   17,   18,   19,
           20,   21,   22,   23,   24,   25,    8,    9,   10,  148,
          100,  101,  148,  150,  149,  149,  149,  107,    8,    9,
           10,  111,  112,  149,   26,  149,   28,   29,   30,   31,
          120,  121,  122,  123,   54,   55,   26,  149,   28,   29,
           30,   31,   32,   33,   34,   35,   36,   37,   38,  100,
          101,  149,  142,  149,  100,  149,  107,  149,  151,  149,
          111,  112,    8,    9,   10,  111,  112,  150,  150,  120,
          121,  122,  123,  150,  120,  121,  122,  123,  150,  150,
           26,  150,   28,   29,   30,   31,   32,   33,  150,  150,
          150,  142,    8,    9,   10,  150,  150,  100,  149,  151,
          150,  150,  150,  149,  151,  150,  126,  150,  111,  112,
           26,  100,   28,   29,   30,   31,   32,  120,  121,  122,
          123,  150,  111,  112,  150,  153,  151,  100,  151,  151,
          151,  120,  121,  122,  123,  151,  151,  151,  111,  112,
          151,  100,  151,  151,  151,  100,  149,  120,  121,  122,
          123,  151,  111,  112,  151,  151,  111,  112,  100,  151,
          149,  120,  121,  122,  123,  120,  121,  122,  123,  111,
          112,  151,  154,   85,   -1,  154,  149,  154,  120,  121,
          122,  123,  154,    8,    9,   10,  154,  154,  100,   87,
          149,  154,  154,  154,  149,   89,  154,  154,  154,  111,
          112,   26,  100,   28,   29,   30,  100,  149,  120,  121,
          122,  123,   91,  111,  112,  154,  154,  111,  112,  154,
           -1,  100,  120,  121,  122,  123,  120,  121,  122,  123,
           -1,   -1,  111,  112,  100,   -1,   -1,   -1,   -1,   -1,
           -1,  120,  121,  122,  123,  111,  112,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,  120,  121,  122,  123
    );

    protected $actionBase = array(
            0,  770,  809,    2,  814,  702,  948,  981,  966,  918,
          857,  905,  962,  901,  887,  871,  994,  994,  994,  994,
          994,  510,  538,  491,  467,  491,  542,   -2,   -2,   -2,
          148,  116,  223,  223,  615,  223,  469,  426,  501,  298,
          351,  255,  394,  544,  544,  544,  544,  701,  701,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  221,  674,
          577,  583,  673,  672,  670,  669,  813,  585,  571,  696,
          725,  507,  726,  727,  734,  768,  766,  678,  748,  878,
          736,  128,  128,  128,  128,  128,  128,  128,  128,  128,
          128,  128,  171,  309,  234,   84,  202,  188,  384,  384,
          384,  384,  384,  384,  281,  281,  281,  281,  281,  281,
          281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
          211,  480,  480,  480,  403,  606,  459,  700,  700,  700,
          700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
          700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
          700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
          700,  700,  700,  700,  700,  700,  700,  700,  700,  179,
          -18,  -18, 1035,  473,  858,  413,  944,  320,  914,  870,
          870,  870,  870,  870,  -24,  697,    4,    4,    4,    4,
          840,  623,  623,  623,  623,  239,  239,  239,  239,  -31,
          316,  282,   73,   73,  588,  588,  516,  680,  500,  500,
          475,  475,  269,  269,  269,  269,  269,  269,  269,  269,
          269,  269,  515,  521,  805,  805,  110,  110,  110,  110,
          397,  397,  395,  379,  220,   -1,  422,  422,  422,  624,
          624,  624,  256,  152,  580,  261,  261,  261,  595,  573,
          596,  280,  -55,  -55,  -55,  -55,  214,  682,  -55,  -55,
          -55,  277,   44,   44,  226,  264,  592,  620,  591,  612,
          402,  619,  129,  622,  622,  622,  235,  509,  385,  381,
          435,  611,  166,  235,  221,  248,  383,   34,  525,  621,
          546,  661,  617,   82,   43,   13,  416,  228,  238,   98,
          665,  662,  767,  808,   35,    3,  597,  525,  525,  525,
          209,  286,  228,  -82,  263,  263,  263,  263,  263,  263,
          263,  263,  572,  112,  196,  679,    8,  474,  788,  563,
          834,  547,  550,  563,  535,  474,  791,  791,  791,  791,
          474,  550,  834,  834,  474,  516,  834,  105,  474,  582,
          550,  576,  791,  654,  650,  563,  529,  584,  834,  834,
          834,  547,  474,  791,  508,  625,  217,  834,  791,  534,
          534,  508,  474,  534,  535,  534,   48,  527,  540,  789,
          800,  723,  569,  690,  581,  575,  812,  811,  831,  560,
          549,  815,  783,  562,  649,  539,  434,  537,  523,  536,
          532,  574,  530,  605,  509,  602,  517,  517,  517,  594,
          618,  594,  517,  517,  517,  517,  517,  517,  517,  517,
          925,  614,  603,  607,  524,  648,  466,  562,  589,  451,
          691,  562,  844,  860,  832,  556,  810,  846,  594,  922,
          659,   55,  449,  806,  566,  561,  594,  799,  594,  692,
          594,  839,  564,  764,  562,  517,  838,  921,  904,  903,
          902,  899,  898,  897,  893,  528,  892,  646,  853,  259,
          817,  611,  616,  565,  645,  301,  888,  594,  594,  693,
          682,  594,  643,  658,  868,  641,  852,  883,  573,  851,
          594,  593,  881,  301,  533,  518,  835,  639,  777,  568,
          837,  778,  694,  445,  762,  531,  635,  864,  863,  880,
          632,  698,  699,  470,  545,  578,  579,  721,  798,  631,
          845,  590,  613,  587,  586,  724,  554,  849,  628,  668,
          601,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,    0,    0,    0,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,  128,  128,  128,  128,
          128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
          128,  128,  128,  128,  128,  128,  128,  128,  128,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          128,  -18,  -18,  -18,  -18,  128,  -18,  -18,  -18,  -18,
          -18,  -18,  128,  128,  128,  128,  128,  128,  128,  128,
          128,  128,  128,  128,  128,  128,  128,  128,  -18,  128,
          128,  128,  -18,  269,  -18,  269,  269,  269,  269,  269,
          269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
          269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
          269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
          269,  269,  269,  269,  269,  269,  269,  128,    0,    0,
          128,  -18,  128,  -18,  128,  -18,  128,  128,  128,  128,
          128,  128,  -18,  -18,  -18,  -18,  -18,  -18,    0,  422,
          422,  422,  422,  -18,  -18,  -18,  -18,  172,  172,  172,
          269,  269,  269,  269,  269,  269,  422,  422,  624,  624,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          172,  172,  269,  269,  -55,  -55,  -55,  -55,  -55,  -55,
           44,   44,   44,  238,    0,    0,    0,    0,    0,    0,
          -55,  550,   44,  363,  363,  363,   44,   44,   44,  238,
            0,    0,    0,    0,  550,  363,    0,    0,    0,  834,
            0,    0,    0,  363,  371,  371,  371,  371,  301,  228,
            0,  550,  550,  550,    0,  529,    0,    0,    0,  834,
            0,    0,    0,    0,    0,    0,  517,   55,  810,  411,
          415,    0,    0,    0,    0,    0,    0,    0,  415,  415,
          392,  392,    0,    0,  528,  517,  517,  517,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          411,    0,    0,  301
    );

    protected $actionDefault = array(
            3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  111,  103,  117,  102,
          113,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  424,  424,32767,  381,32767,32767,32767,32767,
        32767,32767,32767,  188,  188,  188,32767,32767,32767,  413,
          413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
        32767,32767,32767,32767,32767,  270,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          275,  429,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  251,  252,  254,  255,  187,  414,  139,  276,  428,
          186,  141,  215,  385,32767,32767,32767,  217,   26,  150,
           95,  384,  185,  126,  269,  216,  192,  197,  198,  199,
          200,  201,  202,  203,  204,  205,  206,  207,  208,  191,
          339,  248,  247,  246,  341,32767,  340,  378,  378,  381,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  213,
          367,  366,  214,  337,  218,  338,  220,  342,  219,  236,
          237,  234,  235,  238,  344,  343,  360,  361,  358,  359,
          190,  239,  240,  241,  242,  362,  363,  364,  365,  172,
          172,  172,32767,32767,  423,  423,32767,32767,  227,  228,
          351,  352,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  173,32767,32767,32767,  130,  130,  130,  130,
          130,32767,32767,32767,32767,32767,  222,  223,  221,  346,
          347,  345,32767,32767,  313,32767,32767,32767,32767,32767,
          315,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  386,  314,32767,32767,32767,32767,32767,32767,32767,
        32767,  399,  302,32767,32767,32767,32767,  295,  114,  116,
           64,  370,32767,32767,32767,32767,32767,  404,  232,32767,
        32767,32767,32767,32767,32767,  436,32767,  399,32767,32767,
        32767,32767,32767,32767,32767,32767,  245,  224,  225,  226,
        32767,32767,  403,  397,  354,  355,  356,  357,  348,  349,
          350,  353,32767,32767,32767,32767,32767,   68,  310,32767,
          316,32767,32767,32767,32767,   68,32767,32767,32767,32767,
           68,32767,  402,  401,   68,32767,  296,  380,   68,   81,
        32767,   79,32767,  100,  100,32767,32767,   83,  376,  392,
        32767,32767,   68,32767,  284,   70,  380,32767,32767,  132,
          132,  284,   68,  132,32767,  132,32767,    4,  320,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,  297,32767,32767,32767,  266,  267,  373,
          388,32767,  389,32767,  295,32767,  230,  231,  233,  210,
        32767,  212,  256,  257,  258,  259,  260,  261,  262,  264,
        32767,32767,  300,  303,32767,32767,32767,    6,   20,  149,
        32767,  298,32767,  195,32767,32767,32767,32767,  431,32767,
        32767,  189,32767,32767,   22,32767,  145,32767,   66,32767,
          421,32767,32767,  397,  299,  229,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  398,32767,32767,32767,  121,
        32767,  333,32767,32767,32767,   82,32767,  193,  140,32767,
        32767,  430,32767,32767,32767,32767,32767,32767,32767,32767,
           67,32767,32767,   84,32767,32767,  397,32767,32767,32767,
        32767,32767,32767,  184,32767,32767,32767,32767,32767,  397,
        32767,32767,32767,  125,32767,32767,32767,32767,32767,32767,
        32767,    4,32767,  166,32767,32767,32767,32767,32767,32767,
        32767,   28,   28,    3,   28,  108,   28,  152,    3,  100,
          100,   61,  152,   28,  152,   28,   28,   28,   28,   28,
          159,   28,   28,   28,   28,   28,   28,   28
    );

    protected $goto = array(
          167,  167,  141,  141,  146,  141,  142,  143,  144,  149,
          151,  186,  169,  165,  165,  165,  165,  146,  146,  166,
          166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
          161,  162,  163,  164,  184,  140,  486,  487,  368,  488,
          492,  493,  494,  495,  496,  497,  498,  499,  834,  145,
          147,  148,  150,  172,  177,  185,  201,  249,  252,  254,
          256,  258,  259,  260,  261,  262,  263,  271,  272,  273,
          274,  288,  289,  316,  317,  318,  387,  388,  389,  535,
          187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
          197,  198,  199,  152,  153,  154,  168,  155,  170,  156,
          202,  171,  157,  158,  159,  203,  160,  138,  551,  692,
          551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
          551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
          551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
          551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
          551,  551,  490,  490,  490,  490,  490,  490, 1039, 1039,
          563,  587,  490,  490,  490,  490,  490,  490,  490,  490,
          490,  490,  776,    1,  501,  501, 1070, 1070,    2, 1055,
         1055, 1055,  647,  647,  647,  426,  426,  426,  426,  426,
          426, 1038, 1073, 1070,  513,  426,  426,  426,  426,  426,
          426,  426,  426,  426,  426, 1073, 1073,  934,  934,  765,
          765,  765,  765,  765,  765,  537,  538,  539,  540,  541,
          542,  543,  544,  546,  572,  602,  758,  758, 1060, 1060,
          646,  646,  646,  813,  406,  723,  723,  723,  723,  503,
          503,  718,  724,  596,  552,  347,  552,  552,  552,  552,
          552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
          552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
          552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
          552,  552,  552,  552,  552,  552,  552,  552,  969,  531,
          969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
          969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
          969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
          969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
          969,  969,  592, 1064,  330,  597,  369,  366,  314,  280,
          175,  281,  580,  502,  502,  178,  179,  180,  394,  395,
          396,  397,  174,  200,  204,  206,  253,  255,  257,  264,
          265,  266,  267,  268,  269,  275,  276,  277,  278,  290,
          291,  319,  320,  321,  398,  399,  400,  401,  176,  181,
          250,  251,  182,  183,    5, 1032,   16, 1020,    6,  566,
          569,  607,  573,  350,  405,    7,  588,   17,   18,    8,
           19,    9,  376,   20,   10,   11,   12,   13,   14,   15,
          393,  589,  530,  530,  557,  526,  645,  645,  645,  507,
          528,  528,  489,  491,  518,  533,  558,  561,  570,  576,
          348,  349,  507,  832, 1040, 1040,  744,  729,  727,  725,
          727,  615,  504,  753,  748,  377,  377,  377,  370,  507,
          507,  507,  516,  950,  955,  536,  527,  377, 1057,  512,
          383,  891,   26,   21,  362,  392,  930,  931,  945,  944,
          445,  881,  512,  512,  380,  381,  625,  547,  524,  762,
          594,  771,  928, 1031,  928,  780,  656,  402,   29,  970,
          925,  929,  662,  585,  785,  732, 1017,  453,    0,    0,
            0,  821,    0,    0,    0,    0,    0,    0,  507,    0,
            0,    0,    0,    0,    0,    0,    0,  511,    0,    0,
            0,    0,    0,    0,    0,    0,  534,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  517
    );

    protected $gotoCheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   39,   32,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   94,   94,   94,   94,   94,   94,   96,   96,
           22,   22,   94,   94,   94,   94,   94,   94,   94,   94,
           94,   94,   63,    2,   94,   94,  119,  119,    2,   96,
           96,   96,    8,    8,    8,   39,   39,   39,   39,   39,
           39,   96,  119,  119,   79,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,  119,  119,   39,   39,   39,
           39,   39,   39,   39,   39,   88,   88,   88,   88,   88,
           88,   88,   88,   88,   88,   39,   56,   56,   56,   56,
            7,    7,    7,   76,   76,   39,   39,   39,   39,  100,
          100,   39,   39,   39,   97,   51,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,  104,   87,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,   43,  118,  103,   43,   29,   43,  103,   47,
           13,   47,  106,   97,   97,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   14,   61,   14,  110,   14,   42,
           42,   42,   49,   49,   49,   14,   31,   14,   14,   14,
           14,   14,    5,   14,   14,   14,   14,   14,   14,   14,
           33,   33,   33,   33,   33,   33,    6,    6,    6,    4,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           51,   51,    4,   79,   95,   95,    6,    6,    6,    6,
            6,    6,    6,    6,    6,  101,  101,  101,   40,    4,
            4,    4,   40,   16,   61,   26,   40,  101,  116,   26,
           30,   16,   16,   16,   16,  101,   61,   61,  102,  102,
           40,   80,   26,   26,    9,    9,   53,   16,    5,   58,
           40,   60,   61,   61,   61,   64,   11,   10,   16,  105,
           92,   61,   12,   16,   65,   50,  109,   86,   -1,   -1,
           -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   79
    );

    protected $gotoBase = array(
            0,    0, -440,    0,   96,   66,  415,  229,  181,  121,
           74,  131,   57,  135, -228,    0,   45,    0,    0,    0,
            0,    0,  116,    0,    0,  -30,  425,    0,    0,  290,
          167,  113,   84,  128,    0,    0,    0,    0,    0,  -97,
           28,    0,   82, -118,    0,    0,    0, -283,    0,   59,
           54, -189,    0,  112,    0,    0,  -56,    0,  169,    0,
          170,   44,    0,  141,  122,   58,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  -69,    0,   47,  147,
          166,    0,    0,    0,    0,    0,   46,  256,  165,    0,
            0,    0,   75,    0, -130,  130, -146,   39,    0,    0,
          -65,  120,  142,   10,   83,  124,  134,    0,    0,   50,
          178,    0,    0,    0,    0,    0,  173,    0,  298, -137,
            0
    );

    protected $gotoDefault = array(
        -32768,  456,    3,  640,  473,  508,  667,  668,  669,  372,
          371,  657,  663,  173,    4,  665,  882,  358,  672,  359,
          575,  674,  520,  676,  677,  139,  474,  373,  374,  521,
          382,  564,  691,  270,  379,  693,  360,  695,  700,  361,
          595,  579,  548,  591,  475,  437,  559,  279,  529,  555,
          731,  346,  739,  628,  747,  750,  476,  549,  761,  442,
          769,  927,  390,  775,  781,  786,  789,  414,  403,  571,
          793,  794,  322,  798,  603,  604,  812,  302,  820,  833,
          410,  901,  903,  477,  478,  514,  450,  500,  519,  479,
          921,  404,  924,  480,  481,  422,  423,  942,  939,  352,
         1025,  351,  439,  313, 1010, 1009,  567,  974,  446, 1063,
         1021,  341,  482,  483,  367,  384, 1058,  427, 1065, 1072,
          556
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    9,    9,
           11,   11,   11,   11,   10,   10,   12,   14,   14,   15,
           15,   15,   15,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,   36,   36,   38,   37,   37,   30,   30,   40,   40,
           41,   41,    7,    8,    8,    8,   44,   44,   44,   45,
           45,   48,   48,   46,   46,   49,   49,   23,   23,   32,
           32,   35,   35,   34,   34,   50,   24,   24,   24,   24,
           51,   51,   52,   52,   53,   53,   21,   21,   17,   17,
           54,   19,   19,   55,   18,   18,   20,   20,   31,   31,
           31,   42,   42,   57,   57,   58,   58,   60,   60,   60,
           59,   59,   43,   43,   61,   61,   61,   62,   62,   63,
           63,   63,   27,   27,   64,   64,   64,   28,   28,   65,
           65,   47,   47,   66,   66,   66,   66,   71,   71,   72,
           72,   73,   73,   73,   73,   74,   75,   75,   70,   70,
           67,   67,   69,   69,   77,   77,   76,   76,   76,   76,
           76,   76,   68,   68,   78,   78,   29,   29,   22,   22,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   16,   16,   26,   26,   83,   83,   84,
           84,   84,   84,   79,   86,   86,   91,   91,   92,   93,
           93,   93,   93,   93,   93,   97,   97,   39,   39,   39,
           80,   80,   98,   98,   94,   94,   99,   99,   99,   99,
           81,   81,   81,   85,   85,   85,   90,   90,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,   13,   13,   13,   13,   13,   13,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
           89,   89,   82,   82,   82,   82,  105,  105,  106,  106,
          109,  109,  108,  108,  110,  110,   33,   33,   33,   33,
          112,  112,  111,  111,  111,  111,  111,  113,  113,   96,
           96,  100,  100,   95,   95,  114,  114,  114,  114,  101,
          101,  101,  101,   88,   88,  102,  102,  102,   56,  115,
          115,  116,  116,  116,   87,   87,  117,  117,  118,  118,
          118,  118,  103,  103,  103,  103,  119,  119,  119,  119,
          119,  119,  119,  120,  120,  120
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    4,    3,    3,    1,
            1,    3,    2,    4,    3,    1,    3,    2,    0,    1,
            1,    1,    1,    3,    5,    8,    3,    5,    9,    3,
            2,    3,    2,    3,    2,    3,    2,    3,    3,    3,
            1,    2,    5,    7,    9,    5,    1,    6,    3,    3,
            2,    0,    2,    8,    0,    4,    1,    3,    0,    1,
            0,    1,   10,    7,    6,    5,    1,    2,    2,    0,
            2,    0,    2,    0,    2,    1,    3,    1,    4,    1,
            4,    1,    4,    1,    3,    3,    3,    4,    4,    5,
            0,    2,    4,    3,    1,    1,    1,    4,    0,    2,
            3,    0,    2,    4,    0,    2,    0,    3,    1,    2,
            1,    1,    0,    1,    3,    4,    6,    1,    1,    1,
            0,    1,    0,    2,    2,    3,    3,    1,    3,    1,
            2,    2,    3,    1,    1,    2,    4,    3,    1,    1,
            3,    2,    0,    3,    3,    9,    3,    1,    3,    0,
            2,    4,    5,    4,    4,    3,    1,    1,    1,    3,
            1,    1,    0,    1,    1,    2,    1,    1,    1,    1,
            1,    1,    1,    3,    1,    3,    3,    1,    0,    1,
            1,    3,    3,    4,    4,    1,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    1,    3,    5,    4,    3,    4,
            4,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            2,    2,    2,    2,    2,    1,    1,    1,    3,    2,
            1,   10,   11,    3,    3,    2,    4,    4,    3,    4,
            4,    4,    4,    3,    0,    4,    1,    3,    2,    2,
            4,    6,    2,    2,    4,    1,    1,    1,    2,    3,
            1,    1,    1,    1,    1,    1,    3,    3,    4,    4,
            0,    2,    1,    0,    1,    1,    0,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
            2,    1,    3,    1,    4,    3,    1,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
            3,    3,    3,    3,    3,    3,    5,    4,    4,    3,
            1,    3,    1,    1,    3,    3,    1,    1,    0,    2,
            0,    1,    3,    1,    3,    1,    1,    1,    1,    1,
            6,    4,    3,    4,    2,    4,    4,    1,    3,    1,
            2,    1,    1,    4,    1,    3,    6,    4,    4,    4,
            4,    1,    4,    0,    1,    1,    3,    1,    4,    3,
            1,    1,    1,    0,    0,    2,    3,    1,    3,    1,
            4,    2,    2,    2,    1,    2,    1,    4,    3,    3,
            3,    6,    3,    1,    1,    1
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1($attributes) {
         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule2($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule3($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule4($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule5($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule6($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule7($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule8($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule9($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule10($attributes) {
         $this->semValue = new Node\Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $attributes); 
    }

    protected function reduceRule11($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $attributes); 
    }

    protected function reduceRule12($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule13($attributes) {
         $this->semValue = new Node\Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule14($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Node\Stmt\Use_::TYPE_NORMAL, $attributes); 
    }

    protected function reduceRule15($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_FUNCTION, $attributes); 
    }

    protected function reduceRule16($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_CONSTANT, $attributes); 
    }

    protected function reduceRule17($attributes) {
         $this->semValue = new Node\Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule18($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule19($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule20($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, $attributes); 
    }

    protected function reduceRule21($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule22($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule23($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule24($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule25($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule26($attributes) {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule27($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule28($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule29($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule30($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule31($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule32($attributes) {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope'); 
    }

    protected function reduceRule33($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule34($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(5-2)], array('stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]), $attributes); 
    }

    protected function reduceRule35($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(8-2)], array('stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]), $attributes); 
    }

    protected function reduceRule36($attributes) {
         $this->semValue = new Node\Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule37($attributes) {
         $this->semValue = new Node\Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $attributes); 
    }

    protected function reduceRule38($attributes) {
         $this->semValue = new Node\Stmt\For_(array('init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule39($attributes) {
         $this->semValue = new Node\Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule40($attributes) {
         $this->semValue = new Node\Stmt\Break_(null, $attributes); 
    }

    protected function reduceRule41($attributes) {
         $this->semValue = new Node\Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule42($attributes) {
         $this->semValue = new Node\Stmt\Continue_(null, $attributes); 
    }

    protected function reduceRule43($attributes) {
         $this->semValue = new Node\Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule44($attributes) {
         $this->semValue = new Node\Stmt\Return_(null, $attributes); 
    }

    protected function reduceRule45($attributes) {
         $this->semValue = new Node\Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule46($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule47($attributes) {
         $this->semValue = new Node\Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule48($attributes) {
         $this->semValue = new Node\Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule49($attributes) {
         $this->semValue = new Node\Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule50($attributes) {
         $this->semValue = new Node\Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule51($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule52($attributes) {
         $this->semValue = new Node\Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $attributes); 
    }

    protected function reduceRule53($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]), $attributes); 
    }

    protected function reduceRule54($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], array('keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule55($attributes) {
         $this->semValue = new Node\Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule56($attributes) {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule57($attributes) {
         $this->semValue = new Node\Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule58($attributes) {
         $this->semValue = new Node\Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule59($attributes) {
         $this->semValue = new Node\Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule60($attributes) {
         $this->semValue = new Node\Stmt\Label($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule61($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule62($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule63($attributes) {
         $this->semValue = new Node\Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $attributes); 
    }

    protected function reduceRule64($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule65($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule66($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule67($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule68($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule69($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule70($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule71($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule72($attributes) {
         $this->semValue = new Node\Stmt\Function_($this->semStack[$this->stackPos-(10-3)], array('byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function reduceRule73($attributes) {
         $this->semValue = new Node\Stmt\Class_($this->semStack[$this->stackPos-(7-2)], array('type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]), $attributes); 
    }

    protected function reduceRule74($attributes) {
         $this->semValue = new Node\Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], array('extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]), $attributes); 
    }

    protected function reduceRule75($attributes) {
         $this->semValue = new Node\Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule76($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule77($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule78($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule79($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule80($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule81($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule82($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule83($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule84($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule85($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule86($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule87($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule88($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule89($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule90($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule91($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule92($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule93($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule94($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule95($attributes) {
         $this->semValue = new Node\Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule96($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule97($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule98($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule99($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)]; 
    }

    protected function reduceRule100($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule101($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule102($attributes) {
         $this->semValue = new Node\Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule103($attributes) {
         $this->semValue = new Node\Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule104() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule105() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule106($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule107($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule108($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule109($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule110($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $attributes); 
    }

    protected function reduceRule111($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule112($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule113($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule114($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule115($attributes) {
         $this->semValue = new Node\Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $attributes); 
    }

    protected function reduceRule116($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule117($attributes) {
         $this->semValue = new Node\Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule118($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule119($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true); 
    }

    protected function reduceRule120($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule121($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule122($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule123($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule124($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule125($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule126($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $attributes); 
    }

    protected function reduceRule127($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule128($attributes) {
         $this->semValue = 'array'; 
    }

    protected function reduceRule129($attributes) {
         $this->semValue = 'callable'; 
    }

    protected function reduceRule130($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule131($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule132($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule133($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule134($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule135($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule136($attributes) {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $attributes)); 
    }

    protected function reduceRule137($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule138($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule139($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $attributes); 
    }

    protected function reduceRule140($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $attributes); 
    }

    protected function reduceRule141($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $attributes); 
    }

    protected function reduceRule142($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule143($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule144($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule145($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule146($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule147($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule148($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule149($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule150($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule151($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule152($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule153($attributes) {
         $this->semValue = new Node\Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule154($attributes) {
         $this->semValue = new Node\Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule155($attributes) {
         $this->semValue = new Node\Stmt\ClassMethod($this->semStack[$this->stackPos-(9-4)], array('type' => $this->semStack[$this->stackPos-(9-1)], 'byRef' => $this->semStack[$this->stackPos-(9-3)], 'params' => $this->semStack[$this->stackPos-(9-6)], 'returnType' => $this->semStack[$this->stackPos-(9-8)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule156($attributes) {
         $this->semValue = new Node\Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule157($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule158($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule159($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule160($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule161($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule162($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule163($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $attributes); 
    }

    protected function reduceRule164($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule165($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]); 
    }

    protected function reduceRule166($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule167($attributes) {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule168($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule169($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule170($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule171($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule172($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule173($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule174($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule175($attributes) {
         Node\Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule176($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule177($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function reduceRule178($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function reduceRule179($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function reduceRule180($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule181($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule182($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule183($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule184($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule185($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule186($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule187($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule188($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule189($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule190($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule191($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule192($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule193($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule194($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule195($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule196($attributes) {
         $this->semValue = new Node\Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule197($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule198($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule199($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule200($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule201($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule202($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule203($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule204($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule205($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule206($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule207($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule208($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule209($attributes) {
         $this->semValue = new Node\Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule210($attributes) {
         $this->semValue = new Node\Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule211($attributes) {
         $this->semValue = new Node\Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule212($attributes) {
         $this->semValue = new Node\Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule213($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule214($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule215($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule216($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule217($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule218($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule219($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule220($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule221($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule222($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule223($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule224($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule225($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule226($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule227($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule228($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule229($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule230($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule231($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule232($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule233($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule234($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule235($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule236($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule237($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule238($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Spaceship($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule239($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule240($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule241($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule242($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule243($attributes) {
         $this->semValue = new Node\Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule244($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule245($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule246($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule247($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule248($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule249($attributes) {
         $this->semValue = new Node\Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule250($attributes) {
         $this->semValue = new Node\Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule251($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE, $attributes); 
    }

    protected function reduceRule252($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE_ONCE, $attributes); 
    }

    protected function reduceRule253($attributes) {
         $this->semValue = new Node\Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule254($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE, $attributes); 
    }

    protected function reduceRule255($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE_ONCE, $attributes); 
    }

    protected function reduceRule256($attributes) {
         $this->semValue = new Node\Expr\Cast\Int_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule257($attributes) {
         $this->semValue = new Node\Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule258($attributes) {
         $this->semValue = new Node\Expr\Cast\String_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule259($attributes) {
         $this->semValue = new Node\Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule260($attributes) {
         $this->semValue = new Node\Expr\Cast\Object_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule261($attributes) {
         $this->semValue = new Node\Expr\Cast\Bool_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule262($attributes) {
         $this->semValue = new Node\Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule263($attributes) {
         $this->semValue = new Node\Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule264($attributes) {
         $this->semValue = new Node\Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule265($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule266($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule267($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule268($attributes) {
         $this->semValue = new Node\Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule269($attributes) {
         $this->semValue = new Node\Expr\Print_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule270($attributes) {
         $this->semValue = new Node\Expr\Yield_(null, null, $attributes); 
    }

    protected function reduceRule271($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function reduceRule272($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]), $attributes); 
    }

    protected function reduceRule273($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule274($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule275($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule276($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $attributes); 
    }

    protected function reduceRule277($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule278($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule279($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule280($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(4-1)]), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule281($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule282($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule283($attributes) {
         $this->semValue = new Node\Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule284($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule285($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule286($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule287($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule288($attributes) {
         $this->semValue = new Node\Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule289($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule290($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule291($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule292($attributes) {
        
            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Node\Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $attributes), $this->semStack[$this->stackPos-(2-2)], $attributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Node\Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes);
                $tmp->var = new Node\Expr\Variable($tmp->var->name, $attributes);
            } else {
                throw new \Exception;
            }
          
    }

    protected function reduceRule293($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule294($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule295($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule296($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule297($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule298($attributes) {
         $this->semValue = new Node\Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule299($attributes) {
         $this->semValue = new Node\Name\Relative($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule300($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule301($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule302($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule303($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule304($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule305($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule306($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule307($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule308($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule309($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule310($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule311($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule312($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule313($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule314($attributes) {
         $this->semValue = array(Node\Scalar\String_::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`')); 
    }

    protected function reduceRule315($attributes) {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '`'); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule316($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule317($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule318($attributes) {
         $this->semValue = new Node\Scalar\LNumber(Node\Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule319($attributes) {
         $this->semValue = new Node\Scalar\DNumber(Node\Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule320($attributes) {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule321($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Line($attributes); 
    }

    protected function reduceRule322($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\File($attributes); 
    }

    protected function reduceRule323($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Dir($attributes); 
    }

    protected function reduceRule324($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Class_($attributes); 
    }

    protected function reduceRule325($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Trait_($attributes); 
    }

    protected function reduceRule326($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Method($attributes); 
    }

    protected function reduceRule327($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Function_($attributes); 
    }

    protected function reduceRule328($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Namespace_($attributes); 
    }

    protected function reduceRule329($attributes) {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $attributes); 
    }

    protected function reduceRule330($attributes) {
         $this->semValue = new Node\Scalar\String_('', $attributes); 
    }

    protected function reduceRule331($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule332($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule333($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule334($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule335($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule336($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule337($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule338($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule339($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule340($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule341($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule342($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule343($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule344($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule345($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule346($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule347($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule348($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule349($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule350($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule351($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule352($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule353($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule354($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule355($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule356($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule357($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule358($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule359($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule360($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule361($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule362($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule363($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule364($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule365($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule366($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule367($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule368($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule369($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule370($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule371($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule372($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule373($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule374($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '"'); } }; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule375($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule376($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule377($attributes) {
         $this->semValue = 'class'; 
    }

    protected function reduceRule378($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule379($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule380() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule381() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule382($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule383($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule384($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule385($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule386($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule387($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule388($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule389($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule390($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule391($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule392($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule393($attributes) {
         $this->semValue = new Node\Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule394($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule395($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule396($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule397($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule398($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule399($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule400($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule401($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule402($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule403($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule404($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule405($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $attributes); 
    }

    protected function reduceRule406($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule407($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule408($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule409($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule410($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule411($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule412($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule413($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule414($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule415($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule416($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule417($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule418($attributes) {
         $this->semValue = new Node\Expr\List_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule419($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule420($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule421($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule422($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule423($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule424($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule425($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule426($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule427($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule428($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule429($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule430($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $attributes); 
    }

    protected function reduceRule431($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $attributes); 
    }

    protected function reduceRule432($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule433($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule434($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule435($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); 
    }

    protected function reduceRule436($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule437($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(4-1)], 1), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule438($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(3-1)], 1), $attributes), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule439($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule440($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule441($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(6-2)], $attributes), $this->semStack[$this->stackPos-(6-4)], $attributes); 
    }

    protected function reduceRule442($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule443($attributes) {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule444($attributes) {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule445($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }
}
